@using ElectroDocument.Controllers.AppContext;
@using ElectroDocument.Controllers.Services;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Authorization;

@inject UserService userService;
@inject IAuthorizationService AuthorizationService;


@{
    ViewData["Title"] = $"Профиль - {Model.FullName}";
    string FullName = Model.FullName;
    string Name = Model.Name;
    string Surname = Model.Surname;
    string? Patronymic = Model.Patronymic;
    string ImageUrl = Model.ImageUrl;
    long id = Model.Id;
    string? passwordError = Model.PasswordError;
    Role Position = Model.Position;
    var docs = Model.docs;
    IEnumerable<Role> roles = Model.Roles;
    long roleid = @Position.Id;
    Employee? emp = await userService.GetEmployeeAsync(id.ToString());

}

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    table, th, td {
        border: 1px solid black;
    }

    th, td {
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #f5f5f5;
        cursor: pointer;
    }
</style>


<body>
    <div class="container">
        <img src="@ImageUrl" alt="Profile Image" class="profile-img">
        <h1 class="fullname">@FullName</h1>
        @{
            var res = await AuthorizationService.AuthorizeAsync(User, "Admin");
            @if (res.Succeeded)
            {
                <select class="position" onchange="toggleButton()">
                    @foreach (Role r in roles)
                    {
                        <option value="@r.Id">@r.Title</option>
                    }
                </select>
                <button id="submitButton" style="display: none;" onclick="submitForm()">Отправить</button>
                <div id="position_message" style="display: none;"></div>
            }
            else
            {
                <div>
                    <p>Должность: @Position.Title</p>
                </div>
            }
        }

    </div>




    <div class="form-container">
        <h1>Изменение изображение профиля</h1>
            <form method="post" enctype="multipart/form-data" action="/Profile/AdminChangeProfilePicture">
            <input type="file" name="profilePicture" accept="image/*">
            <input type="hidden" id="id" name="id" value="@id">
            <button type="submit" class="btn-primary">Сменить изображение профиля</button>
        </form>
        @{
            @if (res.Succeeded)
            {
                <h1>Изменение пароля</h1>
                <form method="post" action="/Profile/ChangePassword">
                    <input type="password" name="currentPassword" placeholder="Текущий пароль" required>
                    <input type="password" name="newPassword" placeholder="Новый пароль" required>
                    <input type="hidden" id="id" name="id" value="@id">
                    @if (passwordError is not null)
                    {
                        <p class="error-message">Ошибка: @passwordError</p>
                    }
                    <button type="submit" class="btn-primary">Изменить пароль</button>
                </form>
            }
        }

    </div>

    <h2>Изменение Персональной Информации</h2>
    <form id="changeForm">
        <label for="surname">Фамилия:</label><br>
        <input type="text" class="form-control" id="surname" name="surname" value="@Model.Surname"><br><br>

        <label for="name">Имя:</label><br>
        <input type="text" class="form-control" id="name" name="name" value="@Model.Name"><br><br>

        <label for="patronymic">Отчество:</label><br>
        <input type="text" class="form-control" id="patronymic" name="patronymic" value="@Model.Patronymic"><br><br>

        <label for="address">Адрес:</label><br>
        <input type="text" class="form-control" id="address" name="address" value="@emp.Individual.Address"><br><br>

        <label for="phone">Номер телефона:</label><br>
        <input type="text" class="form-control" id="phone" name="phone" value="@emp.Individual.PhoneNumber"><br><br>

        <button type="submit">Изменить</button>
    </form>
    <div id="message"></div>

    <h1>Сформировать Документы</h1>
    <a href="/Docs/EmployeeContract?id=@id">Сформировать трудовой договор</a></br>
    <a href="/Docs/Moved?id=@id">Сформировать приказ о переводе</a></br>
    <a href="/Docs/Dismissed?id=@id">Сформировать приказ о расторжении трудового договора</a></br>
    <a href="/Docs/Weekend?id=@id">Сформировать приказ о предоставлние отпускных</a></br>
    <a href="/Docs/Encourage?id=@id">Сформировать приказ о поощерении</a></br>
    <div class="form-container">
        <h1> Документы </h1>
        <input type="text" id="searchInput" onkeyup="searchTable()" placeholder="Введите описание">
        <table id="docTable">
            <thead>
                <tr>
                    <th>Номер документа</th>
                    <th>Дата</th>
                    <th>Описание</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Doc doc in docs)
                {
                    <tr onclick="window.location.href='/Docs/View?id=@doc.Id';">
                        <td>@doc.Number</td>
                        <td>@doc.Date</td>
                        <td>@doc.Title</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</body>


<script>

    document.getElementById('changeForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Предотвращаем стандартное поведение формы

        const formData = new FormData(this); // Создаем объект FormData для сбора данных формы
        formData.append("id", `@id`);
        // Отправляем данные на сервер
        fetch('/Profile/Individual', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Ошибка при выполнении запроса: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                document.getElementById('message').textContent = 'Успешно изменено!';
                // Дополнительные действия после успешного обновления данных
            })
            .catch(error => {
                document.getElementById('message').textContent = 'Произошла ошибка: ' + error.message;
            });
    });
    document.querySelector('.position').value = "@roleid";

    function toggleButton() {
        var selectElement = document.querySelector('.position');
        var submitButton = document.getElementById('submitButton');

        if (selectElement.value !== '') {
            submitButton.style.display = 'block';
        } else {
            submitButton.style.display = 'none';
        }
    }

    function submitForm() {
        var selectedPosition = document.querySelector('.position').value;

        fetch('/Profile/RoleUpdate', {
            method: 'POST',
            body: JSON.stringify({ position: selectedPosition, id: @id }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => {
                if (response.ok) {
                    showMessage('Запрос успешно выполнен.');
                } else {
                    throw new Error('Произошла ошибка при выполнении запроса.');
                }
            })
            .catch(error => {
                showMessage(error.message, true);
            });
    }

    function showMessage(message, isError = false) {
        var messageElement = document.getElementById('position_message');
        messageElement.textContent = message;
        messageElement.style.display = 'block';
        messageElement.style.color = isError ? 'red' : 'green';
    }

    function searchTable() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("docTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[2]; // searching only in third column (Описание)
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>